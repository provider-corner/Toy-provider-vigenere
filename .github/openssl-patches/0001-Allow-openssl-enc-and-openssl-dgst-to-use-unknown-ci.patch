From 0a70b9beae40988497aaca2121ea6f7d8136badf Mon Sep 17 00:00:00 2001
From: Richard Levitte <levitte@openssl.org>
Date: Mon, 15 Feb 2021 18:26:57 +0100
Subject: [PATCH] Allow 'openssl enc' and 'openssl dgst' to use "unknown"
 ciphers and digests

'openssl enc' and 'openssl dgst' use opt_md() and opt_cipher() to get
the algorithms the user asks for, which only used EVP_get_cipherbyname()
and EVP_get_digestbyname().  That would only return legacy implementations
for things the libcrypto has prior knowledge of.

To allow all provider backed algorithms to be fully used, even without
libcrypto's prior knowledge, opt_md() and opt_cipher() now also use
EVP_MD_fetch() and EVP_CIPHER_fetch(), and return them in a second
pointer that our apps has to free.  This is made in such a way that
the application can otherwise continue to use the constant EVP_MD and
EVP_CIPHER pointers.

As a discussion point, this reiterates that application must know what
they have fetched explicitly, and therefore must also free (with
EVP_MD_free() or EVP_CIPHER_free() in this case), and what they have
not (which includes all constant pointers they get from all sorts of
other functions, such as EVP_MD_CTX_md()), and therefore must NOT free.

Fixes #14178
Fixes #14179
---
 apps/dgst.c        |  5 ++++-
 apps/enc.c         |  8 ++++++--
 apps/include/opt.h |  5 +++--
 apps/lib/opt.c     | 15 +++++++++------
 4 files changed, 22 insertions(+), 11 deletions(-)

diff --git a/apps/dgst.c b/apps/dgst.c
index 891cf79279..dfda79a6da 100644
--- a/apps/dgst.c
+++ b/apps/dgst.c
@@ -100,6 +100,7 @@ int dgst_main(int argc, char **argv)
     char *mac_name = NULL, *digestname = NULL;
     char *passinarg = NULL, *passin = NULL;
     const EVP_MD *md = NULL;
+    EVP_MD *fetched_md = NULL;
     const char *outfile = NULL, *keyfile = NULL, *prog = NULL;
     const char *sigfile = NULL;
     const char *md_name = NULL;
@@ -227,7 +228,7 @@ int dgst_main(int argc, char **argv)
     }
     app_RAND_load();
     if (digestname != NULL) {
-        if (!opt_md(digestname, &md))
+        if (!opt_md(digestname, &md, &fetched_md))
             goto opthelp;
     }
 
@@ -446,6 +447,8 @@ int dgst_main(int argc, char **argv)
         }
     }
  end:
+    ERR_print_errors(bio_err);
+    EVP_MD_free(fetched_md);
     OPENSSL_clear_free(buf, BUFSIZE);
     BIO_free(in);
     OPENSSL_free(passin);
diff --git a/apps/enc.c b/apps/enc.c
index 9982337c01..ae7589c9e4 100644
--- a/apps/enc.c
+++ b/apps/enc.c
@@ -110,7 +110,9 @@ int enc_main(int argc, char **argv)
         NULL, *wbio = NULL;
     EVP_CIPHER_CTX *ctx = NULL;
     const EVP_CIPHER *cipher = NULL;
+    EVP_CIPHER *fetched_cipher = NULL;
     const EVP_MD *dgst = NULL;
+    EVP_MD *fetched_dgst = NULL;
     const char *digestname = NULL;
     char *hkey = NULL, *hiv = NULL, *hsalt = NULL, *p;
     char *infile = NULL, *outfile = NULL, *prog;
@@ -297,7 +299,7 @@ int enc_main(int argc, char **argv)
 
     /* Get the cipher name, either from progname (if set) or flag. */
     if (ciphername != NULL) {
-        if (!opt_cipher(ciphername, &cipher))
+        if (!opt_cipher(ciphername, &cipher, &fetched_cipher))
             goto opthelp;
     }
     if (cipher && EVP_CIPHER_flags(cipher) & EVP_CIPH_FLAG_AEAD_CIPHER) {
@@ -309,7 +311,7 @@ int enc_main(int argc, char **argv)
         goto end;
     }
     if (digestname != NULL) {
-        if (!opt_md(digestname, &dgst))
+        if (!opt_md(digestname, &dgst, &fetched_dgst))
             goto opthelp;
     }
     if (dgst == NULL)
@@ -626,6 +628,8 @@ int enc_main(int argc, char **argv)
     }
  end:
     ERR_print_errors(bio_err);
+    EVP_CIPHER_free(fetched_cipher);
+    EVP_MD_free(fetched_dgst);
     OPENSSL_free(strbuf);
     OPENSSL_free(buff);
     BIO_free(in);
diff --git a/apps/include/opt.h b/apps/include/opt.h
index d23bf262fc..f3ce08f803 100644
--- a/apps/include/opt.h
+++ b/apps/include/opt.h
@@ -366,8 +366,9 @@ int opt_umax(const char *arg, uintmax_t *result);
 #endif
 int opt_pair(const char *arg, const OPT_PAIR * pairs, int *result);
 int opt_string(const char *name, const char **options);
-int opt_cipher(const char *name, const EVP_CIPHER **cipherp);
-int opt_md(const char *name, const EVP_MD **mdp);
+int opt_cipher(const char *name,
+               const EVP_CIPHER **cipherp, EVP_CIPHER **fetched_cipherp);
+int opt_md(const char *name, const EVP_MD **mdp, EVP_MD **fetched_mdp);
 char *opt_arg(void);
 char *opt_flag(void);
 char *opt_unknown(void);
diff --git a/apps/lib/opt.c b/apps/lib/opt.c
index 8cc520daec..15a989839e 100644
--- a/apps/lib/opt.c
+++ b/apps/lib/opt.c
@@ -353,10 +353,12 @@ void print_format_error(int format, unsigned long flags)
 }
 
 /* Parse a cipher name, put it in *EVP_CIPHER; return 0 on failure, else 1. */
-int opt_cipher(const char *name, const EVP_CIPHER **cipherp)
+int opt_cipher(const char *name,
+               const EVP_CIPHER **cipherp, EVP_CIPHER **fetched_cipherp)
 {
-    *cipherp = EVP_get_cipherbyname(name);
-    if (*cipherp != NULL)
+    if ((*cipherp = EVP_get_cipherbyname(name)) != NULL
+        || (*cipherp = *fetched_cipherp =
+            EVP_CIPHER_fetch(NULL, name, NULL)) != NULL)
         return 1;
     opt_printf_stderr("%s: Unknown cipher: %s\n", prog, name);
     return 0;
@@ -365,10 +367,11 @@ int opt_cipher(const char *name, const EVP_CIPHER **cipherp)
 /*
  * Parse message digest name, put it in *EVP_MD; return 0 on failure, else 1.
  */
-int opt_md(const char *name, const EVP_MD **mdp)
+int opt_md(const char *name, const EVP_MD **mdp, EVP_MD **fetched_mdp)
 {
-    *mdp = EVP_get_digestbyname(name);
-    if (*mdp != NULL)
+    if ((*mdp = EVP_get_digestbyname(name)) != NULL
+        || (*mdp = *fetched_mdp =
+            EVP_MD_fetch(NULL, name, NULL)) != NULL)
         return 1;
     opt_printf_stderr("%s: Unknown option or message digest: %s\n", prog,
                       name != NULL ? name : "\"\"");
-- 
2.30.0

